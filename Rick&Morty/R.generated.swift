//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LocationDetailStoryboard`.
    static let locationDetailStoryboard = _R.storyboard.locationDetailStoryboard()
    /// Storyboard `LocationsStoryboard`.
    static let locationsStoryboard = _R.storyboard.locationsStoryboard()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LocationDetailStoryboard", bundle: ...)`
    static func locationDetailStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.locationDetailStoryboard)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LocationsStoryboard", bundle: ...)`
    static func locationsStoryboard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.locationsStoryboard)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    /// This `R.color.colors` struct is generated, and contains static references to 0 colors.
    struct colors {
      /// This `R.color.colors.background` struct is generated, and contains static references to 3 colors.
      struct background {
        /// Color `Item`.
        static let item = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Background/Item")
        /// Color `Navigation Bar`.
        static let navigationBar = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Background/Navigation Bar")
        /// Color `Tab Bar`.
        static let tabBar = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Background/Tab Bar")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "Item", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colors.background.item, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "Navigation Bar", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func navigationBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colors.background.navigationBar, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "Tab Bar", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func tabBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colors.background.tabBar, compatibleWith: traitCollection)
        }
        #endif

        #if os(watchOS)
        /// `UIColor(named: "Item", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func item(_: Void = ()) -> UIKit.UIColor? {
          return UIKit.UIColor(named: R.color.colors.background.item.name)
        }
        #endif

        #if os(watchOS)
        /// `UIColor(named: "Navigation Bar", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func navigationBar(_: Void = ()) -> UIKit.UIColor? {
          return UIKit.UIColor(named: R.color.colors.background.navigationBar.name)
        }
        #endif

        #if os(watchOS)
        /// `UIColor(named: "Tab Bar", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func tabBar(_: Void = ()) -> UIKit.UIColor? {
          return UIKit.UIColor(named: R.color.colors.background.tabBar.name)
        }
        #endif

        /// This `R.color.colors.background.gradient` struct is generated, and contains static references to 2 colors.
        struct gradient {
          /// Color `Bottom`.
          static let bottom = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Background/Gradient/Bottom")
          /// Color `Top`.
          static let top = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Background/Gradient/Top")

          #if os(iOS) || os(tvOS)
          /// `UIColor(named: "Bottom", bundle: ..., traitCollection: ...)`
          @available(tvOS 11.0, *)
          @available(iOS 11.0, *)
          static func bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.colors.background.gradient.bottom, compatibleWith: traitCollection)
          }
          #endif

          #if os(iOS) || os(tvOS)
          /// `UIColor(named: "Top", bundle: ..., traitCollection: ...)`
          @available(tvOS 11.0, *)
          @available(iOS 11.0, *)
          static func top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.colors.background.gradient.top, compatibleWith: traitCollection)
          }
          #endif

          #if os(watchOS)
          /// `UIColor(named: "Bottom", bundle: ..., traitCollection: ...)`
          @available(watchOSApplicationExtension 4.0, *)
          static func bottom(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.colors.background.gradient.bottom.name)
          }
          #endif

          #if os(watchOS)
          /// `UIColor(named: "Top", bundle: ..., traitCollection: ...)`
          @available(watchOSApplicationExtension 4.0, *)
          static func top(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.colors.background.gradient.top.name)
          }
          #endif

          fileprivate init() {}
        }

        /// This `R.color.colors.background.segmentedControl` struct is generated, and contains static references to 2 colors.
        struct segmentedControl {
          /// Color `General`.
          static let general = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Background/Segmented Control/General")
          /// Color `Selected`.
          static let selected = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Background/Segmented Control/Selected")

          #if os(iOS) || os(tvOS)
          /// `UIColor(named: "General", bundle: ..., traitCollection: ...)`
          @available(tvOS 11.0, *)
          @available(iOS 11.0, *)
          static func general(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.colors.background.segmentedControl.general, compatibleWith: traitCollection)
          }
          #endif

          #if os(iOS) || os(tvOS)
          /// `UIColor(named: "Selected", bundle: ..., traitCollection: ...)`
          @available(tvOS 11.0, *)
          @available(iOS 11.0, *)
          static func selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.colors.background.segmentedControl.selected, compatibleWith: traitCollection)
          }
          #endif

          #if os(watchOS)
          /// `UIColor(named: "General", bundle: ..., traitCollection: ...)`
          @available(watchOSApplicationExtension 4.0, *)
          static func general(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.colors.background.segmentedControl.general.name)
          }
          #endif

          #if os(watchOS)
          /// `UIColor(named: "Selected", bundle: ..., traitCollection: ...)`
          @available(watchOSApplicationExtension 4.0, *)
          static func selected(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.colors.background.segmentedControl.selected.name)
          }
          #endif

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      /// This `R.color.colors.text` struct is generated, and contains static references to 5 colors.
      struct text {
        /// Color `Body`.
        static let body = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Text/Body")
        /// Color `Item Title Inverse`.
        static let itemTitleInverse = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Text/Item Title Inverse")
        /// Color `Item Title`.
        static let itemTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Text/Item Title")
        /// Color `Navigation Bar`.
        static let navigationBar = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Text/Navigation Bar")
        /// Color `Section Title`.
        static let sectionTitle = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Text/Section Title")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "Body", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func body(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colors.text.body, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "Item Title Inverse", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func itemTitleInverse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colors.text.itemTitleInverse, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "Item Title", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func itemTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colors.text.itemTitle, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "Navigation Bar", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func navigationBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colors.text.navigationBar, compatibleWith: traitCollection)
        }
        #endif

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "Section Title", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func sectionTitle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colors.text.sectionTitle, compatibleWith: traitCollection)
        }
        #endif

        #if os(watchOS)
        /// `UIColor(named: "Body", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func body(_: Void = ()) -> UIKit.UIColor? {
          return UIKit.UIColor(named: R.color.colors.text.body.name)
        }
        #endif

        #if os(watchOS)
        /// `UIColor(named: "Item Title Inverse", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func itemTitleInverse(_: Void = ()) -> UIKit.UIColor? {
          return UIKit.UIColor(named: R.color.colors.text.itemTitleInverse.name)
        }
        #endif

        #if os(watchOS)
        /// `UIColor(named: "Item Title", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func itemTitle(_: Void = ()) -> UIKit.UIColor? {
          return UIKit.UIColor(named: R.color.colors.text.itemTitle.name)
        }
        #endif

        #if os(watchOS)
        /// `UIColor(named: "Navigation Bar", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func navigationBar(_: Void = ()) -> UIKit.UIColor? {
          return UIKit.UIColor(named: R.color.colors.text.navigationBar.name)
        }
        #endif

        #if os(watchOS)
        /// `UIColor(named: "Section Title", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func sectionTitle(_: Void = ()) -> UIKit.UIColor? {
          return UIKit.UIColor(named: R.color.colors.text.sectionTitle.name)
        }
        #endif

        fileprivate init() {}
      }

      /// This `R.color.colors.tint` struct is generated, and contains static references to 1 colors.
      struct tint {
        /// Color `Navigation Bar`.
        static let navigationBar = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Tint/Navigation Bar")

        #if os(iOS) || os(tvOS)
        /// `UIColor(named: "Navigation Bar", bundle: ..., traitCollection: ...)`
        @available(tvOS 11.0, *)
        @available(iOS 11.0, *)
        static func navigationBar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
          return UIKit.UIColor(resource: R.color.colors.tint.navigationBar, compatibleWith: traitCollection)
        }
        #endif

        #if os(watchOS)
        /// `UIColor(named: "Navigation Bar", bundle: ..., traitCollection: ...)`
        @available(watchOSApplicationExtension 4.0, *)
        static func navigationBar(_: Void = ()) -> UIKit.UIColor? {
          return UIKit.UIColor(named: R.color.colors.tint.navigationBar.name)
        }
        #endif

        /// This `R.color.colors.tint.tabBar` struct is generated, and contains static references to 2 colors.
        struct tabBar {
          /// Color `Selected`.
          static let selected = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Tint/Tab Bar/Selected")
          /// Color `Unselected`.
          static let unselected = Rswift.ColorResource(bundle: R.hostingBundle, name: "Colors/Tint/Tab Bar/Unselected")

          #if os(iOS) || os(tvOS)
          /// `UIColor(named: "Selected", bundle: ..., traitCollection: ...)`
          @available(tvOS 11.0, *)
          @available(iOS 11.0, *)
          static func selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.colors.tint.tabBar.selected, compatibleWith: traitCollection)
          }
          #endif

          #if os(iOS) || os(tvOS)
          /// `UIColor(named: "Unselected", bundle: ..., traitCollection: ...)`
          @available(tvOS 11.0, *)
          @available(iOS 11.0, *)
          static func unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
            return UIKit.UIColor(resource: R.color.colors.tint.tabBar.unselected, compatibleWith: traitCollection)
          }
          #endif

          #if os(watchOS)
          /// `UIColor(named: "Selected", bundle: ..., traitCollection: ...)`
          @available(watchOSApplicationExtension 4.0, *)
          static func selected(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.colors.tint.tabBar.selected.name)
          }
          #endif

          #if os(watchOS)
          /// `UIColor(named: "Unselected", bundle: ..., traitCollection: ...)`
          @available(watchOSApplicationExtension 4.0, *)
          static func unselected(_: Void = ()) -> UIKit.UIColor? {
            return UIKit.UIColor(named: R.color.colors.tint.tabBar.unselected.name)
          }
          #endif

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `ClashDisplay.ttf`.
    static let clashDisplayTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ClashDisplay", pathExtension: "ttf")
    /// Resource file `Satoshi.ttf`.
    static let satoshiTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Satoshi", pathExtension: "ttf")

    /// `bundle.url(forResource: "ClashDisplay", withExtension: "ttf")`
    static func clashDisplayTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.clashDisplayTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Satoshi", withExtension: "ttf")`
    static func satoshiTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.satoshiTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `ClashDisplayVariable-Bold`.
    static let clashDisplayVariableBold = Rswift.FontResource(fontName: "ClashDisplayVariable-Bold")
    /// Font `SatoshiVariable-Bold`.
    static let satoshiVariableBold = Rswift.FontResource(fontName: "SatoshiVariable-Bold")

    /// `UIFont(name: "ClashDisplayVariable-Bold", size: ...)`
    static func clashDisplayVariableBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: clashDisplayVariableBold, size: size)
    }

    /// `UIFont(name: "SatoshiVariable-Bold", size: ...)`
    static func satoshiVariableBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: satoshiVariableBold, size: size)
    }

    static func validate() throws {
      if R.font.clashDisplayVariableBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ClashDisplayVariable-Bold' could not be loaded, is 'ClashDisplay.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.satoshiVariableBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SatoshiVariable-Bold' could not be loaded, is 'Satoshi.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultScene {
            static let _key = "DefaultScene"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "DefaultScene"], key: "UISceneConfigurationName") ?? "DefaultScene"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "DefaultScene"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 11 localization keys.
    struct localizable {
      /// Value: Appearing characters
      static let episodeDetailAppearingCharacters = Rswift.StringResource(key: "episode.detail.appearing.characters", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Characters
      static let tabTitleCharacters = Rswift.StringResource(key: "tab.title.characters", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Episodes
      static let characterDetailEpisodes = Rswift.StringResource(key: "character.detail.episodes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Episodes
      static let tabTitleEpisodes = Rswift.StringResource(key: "tab.title.episodes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Info
      static let characterDetailInfo = Rswift.StringResource(key: "character.detail.info", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Info
      static let episodeDetailInfo = Rswift.StringResource(key: "episode.detail.info", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Info
      static let locationDetailInfo = Rswift.StringResource(key: "location.detail.info", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Loading...
      static let generalStateLoading = Rswift.StringResource(key: "general.state.loading", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Locations
      static let tabTitleLocations = Rswift.StringResource(key: "tab.title.locations", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Residents
      static let locationDetailResidents = Rswift.StringResource(key: "location.detail.residents", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: 😢 Something went wrong
      static let generalStateErrorSomethingWentWrong = Rswift.StringResource(key: "general.state.error.something.went.wrong", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Appearing characters
      static func episodeDetailAppearingCharacters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("episode.detail.appearing.characters", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "episode.detail.appearing.characters"
        }

        return NSLocalizedString("episode.detail.appearing.characters", bundle: bundle, comment: "")
      }

      /// Value: Characters
      static func tabTitleCharacters(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab.title.characters", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tab.title.characters"
        }

        return NSLocalizedString("tab.title.characters", bundle: bundle, comment: "")
      }

      /// Value: Episodes
      static func characterDetailEpisodes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("character.detail.episodes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "character.detail.episodes"
        }

        return NSLocalizedString("character.detail.episodes", bundle: bundle, comment: "")
      }

      /// Value: Episodes
      static func tabTitleEpisodes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab.title.episodes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tab.title.episodes"
        }

        return NSLocalizedString("tab.title.episodes", bundle: bundle, comment: "")
      }

      /// Value: Info
      static func characterDetailInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("character.detail.info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "character.detail.info"
        }

        return NSLocalizedString("character.detail.info", bundle: bundle, comment: "")
      }

      /// Value: Info
      static func episodeDetailInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("episode.detail.info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "episode.detail.info"
        }

        return NSLocalizedString("episode.detail.info", bundle: bundle, comment: "")
      }

      /// Value: Info
      static func locationDetailInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location.detail.info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location.detail.info"
        }

        return NSLocalizedString("location.detail.info", bundle: bundle, comment: "")
      }

      /// Value: Loading...
      static func generalStateLoading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.state.loading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.state.loading"
        }

        return NSLocalizedString("general.state.loading", bundle: bundle, comment: "")
      }

      /// Value: Locations
      static func tabTitleLocations(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tab.title.locations", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tab.title.locations"
        }

        return NSLocalizedString("tab.title.locations", bundle: bundle, comment: "")
      }

      /// Value: Residents
      static func locationDetailResidents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location.detail.residents", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location.detail.residents"
        }

        return NSLocalizedString("location.detail.residents", bundle: bundle, comment: "")
      }

      /// Value: 😢 Something went wrong
      static func generalStateErrorSomethingWentWrong(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("general.state.error.something.went.wrong", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "general.state.error.something.went.wrong"
        }

        return NSLocalizedString("general.state.error.something.went.wrong", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try locationDetailStoryboard.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try locationsStoryboard.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct locationDetailStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LocationDetailViewController

      let bundle = R.hostingBundle
      let name = "LocationDetailStoryboard"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct locationsStoryboard: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LocationsViewController

      let bundle = R.hostingBundle
      let name = "LocationsStoryboard"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
